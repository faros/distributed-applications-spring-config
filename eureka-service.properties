server.port=${PORT:8761}
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false

eureka.server.enable-self-preservation=false
#self-preservation can be disabled if required

#eureka.client.service-url.defaultZone=server1,server2

#eureka.instance.lease-renewal-interval-in-seconds = 30
#Indicates the frequency the client sends heartbeats to server to indicate that it is still alive. Itâ€™s not advisable to change this value since self-preservation assumes that heartbeats are always received at intervals of 30 seconds.

#eureka.instance.lease-expiration-duration-in-seconds = 90
#Indicates the duration the server waits since it received the last heartbeat before it can evict an instance from its registry. This value should be greater than lease-renewal-interval-in-seconds. Setting this value too long impacts the precision of actual heartbeats per minute calculation described in the next section, since the liveliness of the registry is dependent on this value. Setting this value too small could make the system intolerable to temporary network glitches.

#eureka.server.eviction-interval-timer-in-ms = 60 * 1000
#A scheduler is run at this frequency which will evict instances from the registry if the lease of the instances are expired as configured by lease-expiration-duration-in-seconds. Setting this value too long will delay the system entering into self-preservation mode.

#eureka.server.renewal-percent-threshold = 0.85
#This value is used to calculate the expected heartbeats per minute as described in the next section.

#eureka.server.renewal-threshold-update-interval-ms = 15 * 60 * 1000
#A scheduler is run at this frequency which calculates the expected heartbeats per minute as described in the next section.